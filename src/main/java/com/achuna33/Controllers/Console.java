package com.achuna33.Controllers;

import com.achuna33.Exceptions.NullMethodArgsException;
import com.achuna33.SupportType.Poc_Exp;
import com.achuna33.UI.UIController;
import com.achuna33.Utils.Cache;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.List;

public class Console extends Thread {

    public static String MethodName ;
    public static String Product;
    public static Object[] args;
    @Override
    public void run()  {
        try {

          Method runMethod = this.getClass().getMethod(MethodName,String.class);
          runMethod.invoke(this,Product);
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
        } catch (InvocationTargetException e) {
            e.printStackTrace();
        } catch (IllegalAccessException e) {
            e.printStackTrace();
        }
    }
    public void setMethodName(String methodName){
        MethodName = methodName;
    }
    public void setProduct(String product){
        Product = product;
    }
    public void setExpArgs(Object... objects){
        args = objects;
    }

    public static void GoPoc(String product) throws InvocationTargetException, IllegalAccessException, NullMethodArgsException, MalformedURLException {
      BasicController controller = Cache.routes.get(product);
      String target = Cache.uiController.targetAddress.getText();
      target = getUrl(target);
      String VulName = Cache.uiController.SupportVul.getValue();
      Cache.uiController.logTextArea.setText("");
      Cache.uiController.logTextArea.appendText("//->>开始扫描 "+ Cache.uiController.SupportType.getValue()+"的 所有POC\n");
      if (VulName.equals("All")){
          List<Method> methodList = Cache.getVulRoutesValue(product);
          for (Method method: methodList){
              try {
                  System.out.println(method.getName());
                  method.invoke(controller, Poc_Exp.POC,target,args);
              }catch (Exception e){
                  System.out.println("invoke methos:"+method.getName()+"时出现错误");
                 // Controller.WriteLog("\n[*] invoke method:"+method.getName()+"时出现错误");
              }

          }
      }else {
          List<Method> methodList = Cache.getVulRoutesValue(product);
          for (Method method: methodList){
              if (method.getName().equals(VulName)){
                  try {
                      Cache.uiController.logTextArea.appendText("\n[*]开始检测 "+method.getName()+":");
                      method.invoke(controller, Poc_Exp.POC,target,args);
                      break;
                  }catch (Exception e){
                      System.out.println("invoke methos:"+method.getName()+"时出现错误");
                      Controller.WriteLog("\n[*] invoke method:"+method.getName()+"时出现错误");
                  }
              }
          }
      }

    }

    public static void GoExp(String product) throws MalformedURLException {
        Cache.uiController.PublicArea.setText("");
        Cache.uiController.PublicArea.appendText("[*]开始:\n");
        BasicController controller = Cache.routes.get(Product);
        String target = Cache.uiController.targetAddress.getText();
        target = getUrl(target);
        String VulName = Cache.uiController.SupportVul.getValue();
        if (VulName.equals("All")){
            Controller.WriteLog("\n[*] 指定利用漏洞");
            return;
        }
        List<Method> methodList = Cache.getVulRoutesValue(product);
        for (Method method: methodList){
            if (method.getName().equals(VulName)){
                try {
                    Cache.uiController.logTextArea.appendText("\n[*]开始检测 "+method.getName()+":");
                        method.invoke(controller, Poc_Exp.EXP,target,args);
                        break;
                }catch (Exception e){
                    System.out.println("[*]invoke methos:"+method.getName()+"时出现错误");
                    Controller.WriteLog("\n[*] invoke method:"+method.getName()+"时出现错误");
                }
            }
        }
    }

    public static String getUrl(String target) throws MalformedURLException {
        URL url = new URL(target);
        String result = "";
        String port = "";
        result = url.getProtocol()+"://"+url.getHost();
        if (url.getPort()<=-1){

        }else {
            result +=":"+url.getPort();
        }
        return result;
    }
    public static void main(String[] args) throws MalformedURLException {
        URL url = new URL("http://127.0.0.1/index");
        System.out.println(url.getProtocol());
        System.out.println(url.getHost());
        System.out.println(url.getPort());
    }
}
